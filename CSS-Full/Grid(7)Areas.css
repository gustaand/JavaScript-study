* {
    font-family: sans-serif;
    font-size: 100;
}

body {
    background: radial-gradient(circle, #fff, #bbb);
}

.grid-container {
    background: #444;
    margin: 10px;
    display: grid;
    grid-template-areas:
    "header header header"
    "aside main main"
    "aside main main"
    "aside main main"
    "aside main main"
    "aside main main"
    "aside main main"
    "footer footer footer";
    grid-template-rows: repeat(auto-fill, 1fr);
    height: 92vh;
    border: 5px solid #000;
}

ul li  {
    display: inline-block;
}

.grid-item {
    padding: 20px;
}

.grid-header {
    background-color:  #f96;
    grid-area: header;
}

.grid-main {
    background-color:  #96f;
    grid-area: main;
}

.grid-aside {
    background-color:  #888;
    grid-area: aside;
}

.grid-footer {
    background-color:  #6f9;
    grid-area: footer;
}


/* para trabajar con grid areas se usa    grid-template-areas: ;  se divide areas como se fuesen nombres. */

/* 
   se define en el grid-container la estrutura de la página y se asignan los grid-items para que se posicione. 
   ej: grid-template-areas: 
   "header header header"
   "aside main main"
   "aside main main"
   "footer footer footer"
   
   De esta forma se crean las filas y las columnas.
   
   Después se asigna el grid item. Ej:

   .grid-header {
       grid-area: header;
   }
*/

/* Lo ideal és dar medidas fijas al header y al footer.*/

/* Grid-Template: row / columns (grid-container) ---- SHORTHAND ----*/
/* Grid-Template: area unidad ---- SHORTHAND ----*/